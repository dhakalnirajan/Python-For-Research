# -*- coding: utf-8 -*-
"""Day_5_Assignment_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OFNR17wQrU97dO2jaynXfE1TZryPMLuU

# 1. Check if usergiven input is prime or not using python function.  Return True if prime return False otherwise
"""

num = int(input("Enter a number: "))

def is_prime(num):
    if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                return False
        else:
            return True
    else:
        return False

print(is_prime(num))

"""# 2. Python function to print factorial of given number"""

def factorial(num):
    if num == 0:
        return 1
    else:
        return num * factorial(num-1)

num = int(input("Enter a number: "))
print("Factorial of", num, "is", factorial(num))

"""# 3. Python Function to return the Sum of Natural Numbers

"""

def sum_natural_numbers(n):
    if n < 0:
        return 0
    return n + sum_natural_numbers(n-1)

def main():
    num = int(input())
    print(sum_natural_numbers(num))

if __name__ == '__main__':
    main()

"""# 4. Python function to return HCF of given two numbers."""

def hcf(x, y):
    if x > y:
        smaller = y
    else:
        smaller = x
    for i in range(1, smaller+1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
    return hcf

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
print("The H.C.F. of", num1, "and", num2, "is", hcf(num1, num2))

"""
# 4. Find the linear interpolation at x=1.5 based on the data x = [0, 1, 2], y = [1, 3, 2] using python function.


$$\hat{y}(x) = y_i + \frac{(y_{i+1} - y_{i})(x - x_{i})}{(x_{i+1} - x_{i})}$$

Since $1<x<2$, 
we use the second and third data points to compute the linear interpolation. Plug the values

$$ x = 1.5 \\x_i = 1 \\ x_{i+1} = 2 \\ y_i = 3 \\ y_{i+1} = 2 $$

<br>

$$ \hat{y}(x) = y_i + \frac{(y_{i+1} - y_{i})(x - x_{i})}{(x_{i+1} - x_{i})} = 3 + \frac{(2 - 3)(1.5 - 1)}{(2 - 1)}$$"""

def interpolate(x, y):
    y_hat = y[0]+((y[1]-y[0])*(x[2]-x[0]))/(x[1]-x[0])
    return y_hat

x=[1,2,1.5]
y=[3,2]
print(interpolate(x,y))